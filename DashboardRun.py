import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import requests
from bs4 import BeautifulSoup
import time
from datetime import datetime, timedelta
import numpy as np
import re
import json
import io
import base64
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns

# Imports avec gestion d'erreur pour les biblioth√®ques d'export
try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False
    st.warning("‚ö†Ô∏è La biblioth√®que 'reportlab' n'est pas install√©e. L'export PDF ne sera pas disponible. Installez-la avec: pip install reportlab")

try:
    import xlsxwriter
    EXCEL_AVAILABLE = True
except ImportError:
    EXCEL_AVAILABLE = False
    st.warning("‚ö†Ô∏è La biblioth√®que 'xlsxwriter' n'est pas install√©e. L'export Excel ne sera pas disponible. Installez-la avec: pip install xlsxwriter")

# üîß Configuration avanc√©e
st.set_page_config(
    page_title="Dashboard Intelligent - S-Wing R√©union",
    page_icon="üö¢",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.port-reunion.fr',
        'Report a bug': None,
        'About': "Dashboard intelligent pour la logistique portuaire de La R√©union"
    }
)

# üé® CSS avanc√© avec couleurs du drapeau r√©unionnais
st.markdown("""
<style>
    :root {
        --bleu: #0055A4;        /* Bleu du drapeau r√©unionnais */
        --blanc: #FFFFFF;       /* Blanc */
        --rouge: #EF4135;       /* Rouge */
        --jaune: #FFD700;       /* Jaune pour accents */
        --vert: #00A859;        /* Vert r√©unionnais */
        --success: #00A859;
        --warning: #FFD700;
        --danger: #EF4135;
        --texte: #2C3E50;       /* Couleur de texte principale */
        --texte-clair: #7F8C8D; /* Couleur de texte secondaire */
    }
    
    .main {
        color: var(--texte) !important;
    }
    
    .main-header {
        font-size: 2.8rem;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: linear-gradient(135deg, var(--bleu) 0%, var(--rouge) 100%);
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        border: 3px solid var(--blanc);
        position: relative;
        overflow: hidden;
    }
    
    .main-header::before {
        content: "‚òÖ";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 4rem;
        color: var(--jaune);
        opacity: 0.3;
        z-index: 1;
    }
    
    .metric-card {
        background: linear-gradient(145deg, var(--blanc) 0%, #f8f9fa 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 6px solid var(--bleu);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
        transition: transform 0.3s ease;
        border: 1px solid var(--bleu);
        color: var(--texte) !important;
    }
    
    .metric-card h3 {
        color: var(--texte) !important;
        font-size: 1rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }
    
    .metric-card h2 {
        color: var(--bleu) !important;
        font-size: 1.8rem;
        margin: 0.5rem 0;
        font-weight: 700;
    }
    
    .metric-card p {
        color: var(--texte-clair) !important;
        margin: 0;
        font-size: 0.9rem;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        border-left: 6px solid var(--rouge);
    }
    
    .alert-box {
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        border-left: 4px solid;
        color: var(--texte) !important;
        font-weight: 500;
    }
    
    .alert-warning {
        background-color: #FFF9E6;
        border-color: var(--jaune);
        color: #856404 !important;
    }
    
    .alert-success {
        background-color: #E6F7F0;
        border-color: var(--vert);
        color: #155724 !important;
    }
    
    .alert-danger {
        background-color: #FFE6E6;
        border-color: var(--rouge);
        color: #721c24 !important;
    }
    
    .tab-content {
        padding: 1.5rem;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        margin-top: 1rem;
        border: 1px solid #E6E6E6;
        color: var(--texte) !important;
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: var(--blanc);
        border: 2px solid var(--bleu);
        color: var(--bleu) !important;
        border-radius: 8px 8px 0px 0px;
        padding: 10px 20px;
        font-weight: 600;
    }
    
    .stTabs [aria-selected="true"] {
        background: var(--bleu) !important;
        color: var(--blanc) !important;
    }
    
    /* Boutons avec couleurs r√©unionnaises */
    .stButton button {
        background: linear-gradient(135deg, var(--bleu) 0%, var(--rouge) 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 600;
    }
    
    .stButton button:hover {
        background: linear-gradient(135deg, var(--rouge) 0%, var(--bleu) 100%);
        color: white;
    }
    
    /* CORRECTION : Couleur de texte pour tous les √©l√©ments Streamlit */
    .stMarkdown, .stText, .stHeader, .stSubheader, .stMetric,
    h1, h2, h3, h4, h5, h6,
    .element-container, .block-container,
    div[data-testid="stVerticalBlock"] {
        color: var(--texte) !important;
    }
    
    /* Correction sp√©cifique pour les headers dans les tabs */
    .stTabs [data-baseweb="tab-panel"] h1,
    .stTabs [data-baseweb="tab-panel"] h2,
    .stTabs [data-baseweb="tab-panel"] h3,
    .stTabs [data-baseweb="tab-panel"] h4,
    .stTabs [data-baseweb="tab-panel"] h5,
    .stTabs [data-baseweb="tab-panel"] h6 {
        color: var(--texte) !important;
    }
    
    /* CORRECTION AM√âLIOR√âE : Sidebar avec texte blanc lisible */
    .css-1d391kg, .css-1lcbmhc, .css-1a6syd1, [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #0055A4 0%, #EF4135 100%) !important;
    }
    
    .css-1d391kg p, .css-1lcbmhc p, .css-1a6syd1 p,
    .css-1d391kg label, .css-1lcbmhc label, .css-1a6syd1 label,
    .css-1d391kg span, .css-1lcbmhc span, .css-1a6syd1 span,
    .css-1d391kg div, .css-1lcbmhc div, .css-1a6syd1 div,
    .stSidebar p, .stSidebar label, .stSidebar span, .stSidebar div {
        color: white !important;
    }
    
    /* Correction pour les s√©lecteurs et autres √©l√©ments de formulaire dans la sidebar */
    .stSidebar .stSelectbox label, 
    .stSidebar .stSlider label, 
    .stSidebar .stRadio label,
    .stSidebar .stCheckbox label {
        color: white !important;
    }
    
    /* Correction pour le texte des s√©lecteurs dans la sidebar */
    .stSidebar .stSelectbox div[data-baseweb="select"] div {
        color: #2C3E50 !important;
        background: white !important;
    }
    
    /* Tableaux */
    .stDataFrame {
        color: var(--texte) !important;
    }
    
    /* Correction sp√©cifique pour le contenu des onglets */
    section[data-testid="stTabPanel"] {
        color: var(--texte) !important;
    }
    
    section[data-testid="stTabPanel"] h1,
    section[data-testid="stTabPanel"] h2,
    section[data-testid="stTabPanel"] h3 {
        color: var(--texte) !important;
    }
</style>
""", unsafe_allow_html=True)

# üîê Gestion des configurations
class Config:
    """Configuration centralis√©e"""
    SCRAPING_TIMEOUT = 20
    CACHE_DURATION = 300  # 5 minutes
    MAX_RETRIES = 3
    UPDATE_INTERVAL = 3600  # 1 heure

config = Config()

# üß† Intelligence Artificielle - Pr√©dictions simples
class PredictiveAnalytics:
    """Module d'analyse pr√©dictive"""
    
    @staticmethod
    def predict_traffic(df, days=7):
        """Pr√©diction du trafic bas√©e sur les donn√©es historiques"""
        if len(df) < 10:
            return None
            
        # Simple moyenne mobile pour la d√©monstration
        df['prediction'] = df['conteneurs_traites'].rolling(window=7).mean()
        last_value = df['prediction'].iloc[-1]
        
        future_dates = [datetime.now() + timedelta(days=i) for i in range(1, days+1)]
        predictions = [max(0, last_value * (1 + np.random.normal(0, 0.1))) for _ in range(days)]
        
        return pd.DataFrame({
            'date': future_dates,
            'prediction': predictions,
            'confidence': np.random.uniform(0.7, 0.95, days)
        })
    
    @staticmethod
    def detect_anomalies(df, column='conteneurs_traites'):
        """D√©tection d'anomalies simples"""
        mean = df[column].mean()
        std = df[column].std()
        threshold = 2 * std
        
        anomalies = df[abs(df[column] - mean) > threshold]
        return anomalies

# üìä Gestionnaire de donn√©es avanc√©
class DataManager:
    """Gestion centralis√©e des donn√©es"""
    
    def __init__(self):
        self.cache = {}
        self.last_update = {}
    
    @st.cache_data(ttl=config.CACHE_DURATION)
    def scrape_swing_advanced(_self, url):
        """Scraping avanc√© avec retry mechanism"""
        for attempt in range(config.MAX_RETRIES):
            try:
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3',
                }
                
                response = requests.get(url, headers=headers, timeout=config.SCRAPING_TIMEOUT)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # Extraction avanc√©e avec multiple strat√©gies
                data = {
                    'title': self._extract_title(soup),
                    'metadata': self._extract_metadata(soup),
                    'content_blocks': self._extract_content_blocks(soup),
                    'structured_data': self._extract_structured_data(soup),
                    'scraping_time': datetime.now()
                }
                
                return data
                
            except Exception as e:
                if attempt == config.MAX_RETRIES - 1:
                    st.error(f"‚ùå √âchec du scraping apr√®s {config.MAX_RETRIES} tentatives: {e}")
                    return {}
                time.sleep(2 ** attempt)  # Backoff exponentiel
    
    def _extract_title(self, soup):
        """Extraction avanc√©e du titre"""
        title = soup.title.string if soup.title else "S-Wing R√©union"
        
        # Recherche de meta titres
        meta_titles = [meta.get('content') for meta in soup.find_all('meta', attrs={'name': re.compile('title', re.I)})]
        if meta_titles:
            title = meta_titles[0]
            
        return title
    
    def _extract_metadata(self, soup):
        """Extraction des m√©tadonn√©es"""
        metadata = {}
        
        # Meta description
        meta_desc = soup.find('meta', attrs={'name': 'description'})
        if meta_desc:
            metadata['description'] = meta_desc.get('content')
        
        # Keywords
        meta_keywords = soup.find('meta', attrs={'name': 'keywords'})
        if meta_keywords:
            metadata['keywords'] = meta_keywords.get('content')
        
        # Open Graph
        og_tags = soup.find_all('meta', attrs={'property': re.compile('^og:', re.I)})
        for tag in og_tags:
            key = tag.get('property', '').replace('og:', '')
            metadata[f"og_{key}"] = tag.get('content')
        
        return metadata
    
    def _extract_content_blocks(self, soup):
        """Extraction des blocs de contenu"""
        blocks = []
        
        # Strat√©gies d'extraction multiples
        selectors = [
            'article', '.content', '.main-content', '[role="main"]',
            '.post', '.entry-content', '.text-content'
        ]
        
        for selector in selectors:
            elements = soup.select(selector)
            for elem in elements:
                text = elem.get_text(strip=True)
                if len(text) > 100:  # Seulement les blocs significatifs
                    blocks.append({
                        'selector': selector,
                        'text': text[:500] + '...' if len(text) > 500 else text,
                        'length': len(text)
                    })
        
        return blocks
    
    def _extract_structured_data(self, soup):
        """Extraction des donn√©es structur√©es (JSON-LD)"""
        structured_data = []
        
        # JSON-LD
        scripts = soup.find_all('script', type='application/ld+json')
        for script in scripts:
            try:
                data = json.loads(script.string)
                structured_data.append(data)
            except:
                pass
        
        return structured_data

# üì§ Fonction d'export am√©lior√©e avec couleurs r√©unionnaises
class DataExporter:
    """Classe pour g√©rer l'export des donn√©es"""
    
    @staticmethod
    def generate_sample_data():
        """G√©n√®re des donn√©es d'exemple pour l'export"""
        # Donn√©es de trafic
        dates = pd.date_range(start='2024-01-01', periods=30, freq='D')
        traffic_data = pd.DataFrame({
            'date': dates,
            'conteneurs_traites': np.random.randint(800, 1200, 30),
            'navires_arrives': np.random.randint(3, 8, 30),
            'taux_occupation': np.random.uniform(75, 95, 30),
            'delai_moyen': np.random.uniform(1.5, 4.5, 30)
        })
        
        # Donn√©es des navires
        vessels_data = pd.DataFrame({
            'navire': ['MSC Isabella', 'CMA CGM Andes', 'Maersk Cardiff', 'Ever Glory', 'HMM Rotterdam'],
            'type': ['Porte-conteneurs'] * 5,
            'ligne': ['Europe-Asie', 'Am√©rique du Sud', 'Afrique-Europe', 'Asie-Pacifique', 'Europe-Am√©rique'],
            'capacite_teu': [14000, 11000, 12500, 15000, 13500],
            'arrivee_prevue': pd.date_range(start=datetime.now(), periods=5, freq='2D'),
            'statut': ['En route', '√Ä quai', 'En op√©ration', 'En attente', 'En route']
        })
        
        # KPIs
        kpis_data = {
            'Efficacit√© Op√©rationnelle': '94.2%',
            'Taux de Rotation': '3.2 jours',
            'Co√ªt par Conteneur': '‚Ç¨142.50',
            'Empreinte Carbone': '12.4t CO2',
            'Satisfaction Clients': '94.2%',
            'Taux Occupation': '87.3%',
            'Retards Moyens': '2.3h'
        }
        
        return traffic_data, vessels_data, kpis_data
    
    @staticmethod
    def export_to_csv(data, filename="dashboard_data.csv"):
        """Exporte les donn√©es en format CSV"""
        if isinstance(data, dict):
            # Si c'est un dictionnaire de KPIs
            df = pd.DataFrame(list(data.items()), columns=['Indicateur', 'Valeur'])
        else:
            df = data
        
        csv = df.to_csv(index=False)
        return csv.encode('utf-8'), f"{filename}"
    
    @staticmethod
    def export_to_excel(data_dict, filename="dashboard_data.xlsx"):
        """Exporte les donn√©es en format Excel avec plusieurs feuilles"""
        if not EXCEL_AVAILABLE:
            st.error("‚ùå La biblioth√®que 'xlsxwriter' est requise pour l'export Excel. Installez-la avec: pip install xlsxwriter")
            return None, None
            
        output = io.BytesIO()
        
        try:
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                workbook = writer.book
                
                # Styles avec couleurs r√©unionnaises
                header_format = workbook.add_format({
                    'bold': True,
                    'text_wrap': True,
                    'valign': 'top',
                    'fg_color': '#0055A4',  # Bleu r√©unionnais
                    'font_color': 'white',
                    'border': 1
                })
                
                # √âcrire chaque DataFrame dans une feuille diff√©rente
                for sheet_name, data in data_dict.items():
                    if isinstance(data, dict):
                        df = pd.DataFrame(list(data.items()), columns=['Indicateur', 'Valeur'])
                    else:
                        df = data
                    
                    df.to_excel(writer, sheet_name=sheet_name, index=False, startrow=1)
                    
                    # Formatage
                    worksheet = writer.sheets[sheet_name]
                    for col_num, value in enumerate(df.columns.values):
                        worksheet.write(0, col_num, value, header_format)
                    
                    # Ajuster la largeur des colonnes
                    for i, col in enumerate(df.columns):
                        column_len = max(df[col].astype(str).map(len).max(), len(col)) + 2
                        worksheet.set_column(i, i, column_len)
            
            output.seek(0)
            return output.getvalue(), f"{filename}"
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la g√©n√©ration du fichier Excel: {e}")
            return None, None
    
    @staticmethod
    def export_to_json(data_dict, filename="dashboard_data.json"):
        """Exporte les donn√©es en format JSON"""
        json_data = {}
        
        for key, value in data_dict.items():
            if isinstance(value, pd.DataFrame):
                json_data[key] = value.to_dict('records')
            elif isinstance(value, dict):
                json_data[key] = value
            else:
                json_data[key] = str(value)
        
        json_str = json.dumps(json_data, indent=2, ensure_ascii=False, default=str)
        return json_str.encode('utf-8'), f"{filename}"
    
    @staticmethod
    def export_to_pdf(data_dict, filename="dashboard_report.pdf"):
        """Exporte les donn√©es en format PDF avec couleurs r√©unionnaises"""
        if not PDF_AVAILABLE:
            st.error("‚ùå La biblioth√®que 'reportlab' est requise pour l'export PDF. Installez-la avec: pip install reportlab")
            return None, None
            
        buffer = io.BytesIO()
        
        try:
            doc = SimpleDocTemplate(buffer, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []
            
            # Titre avec couleurs r√©unionnaises
            title_style = styles['Title']
            title_style.textColor = colors.HexColor('#0055A4')  # Bleu r√©unionnais
            story.append(Paragraph("Rapport Dashboard - S-Wing R√©union", title_style))
            story.append(Spacer(1, 20))
            
            # Date de g√©n√©ration
            date_style = styles['Normal']
            story.append(Paragraph(f"G√©n√©r√© le: {datetime.now().strftime('%d/%m/%Y %H:%M')}", date_style))
            story.append(Spacer(1, 20))
            
            # Pour chaque ensemble de donn√©es
            for title, data in data_dict.items():
                # Sous-titre avec couleur rouge
                subtitle_style = styles['Heading2']
                subtitle_style.textColor = colors.HexColor('#EF4135')  # Rouge r√©unionnais
                story.append(Paragraph(title.replace('_', ' ').title(), subtitle_style))
                story.append(Spacer(1, 12))
                
                if isinstance(data, pd.DataFrame):
                    # Cr√©er un tableau
                    table_data = [data.columns.tolist()] + data.values.tolist()
                    table = Table(table_data)
                    
                    # Style du tableau avec couleurs r√©unionnaises
                    table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#0055A4')),  # Bleu r√©unionnais
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 10),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#F8F9FA')),
                        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#0055A4'))  # Bordures bleues
                    ]))
                    
                    story.append(table)
                elif isinstance(data, dict):
                    # Pour les KPIs
                    for key, value in data.items():
                        kpi_text = f"<b>{key}:</b> {value}"
                        story.append(Paragraph(kpi_text, date_style))
                
                story.append(Spacer(1, 20))
            
            # Construire le PDF
            doc.build(story)
            buffer.seek(0)
            
            return buffer.getvalue(), f"{filename}"
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la g√©n√©ration du fichier PDF: {e}")
            return None, None

# Initialisation des managers
data_manager = DataManager()
predictive_analytics = PredictiveAnalytics()
data_exporter = DataExporter()

# Fonctions auxiliaires
def generate_vessel_schedule():
    """G√©n√®re un planning de navires r√©aliste"""
    vessels = [
        {'nom': 'MSC Isabella', 'type': 'Porte-conteneurs', 'ligne': 'Europe-Asie', 'capacite': 14000},
        {'nom': 'CMA CGM Andes', 'type': 'Porte-conteneurs', 'ligne': 'Am√©rique du Sud', 'capacite': 11000},
        {'nom': 'Maersk Cardiff', 'type': 'Porte-conteneurs', 'ligne': 'Afrique-Europe', 'capacite': 12500},
        {'nom': 'Ever Glory', 'type': 'Porte-conteneurs', 'ligne': 'Asie-Pacifique', 'capacite': 15000},
        {'nom': 'HMM Rotterdam', 'type': 'Porte-conteneurs', 'ligne': 'Europe-Am√©rique', 'capacite': 13500},
    ]
    
    schedule = []
    current_date = datetime.now()
    
    for i, vessel in enumerate(vessels):
        arrival_date = current_date + timedelta(days=i*2 + np.random.randint(0, 3))
        
        schedule.append({
            'navire': vessel['nom'],
            'type': vessel['type'],
            'ligne': vessel['ligne'],
            'capacite_teu': vessel['capacite'],
            'arrivee_prevue': arrival_date,
            'statut': np.random.choice(['En route', '√Ä quai', 'En op√©ration', 'En attente'])
        })
    
    return pd.DataFrame(schedule)

# üéõÔ∏è Sidebar avanc√©e avec couleurs r√©unionnaises
with st.sidebar:
    st.markdown("""
    <div style='color: white; font-weight: bold; font-size: 1.5rem; margin-bottom: 2rem;'>
        ‚öôÔ∏è Configuration Avanc√©e
    </div>
    """, unsafe_allow_html=True)
    
    # Th√®me
    theme = st.selectbox("üé® Th√®me", ["R√©unionnais", "Clair", "Sombre"], index=0)
    
    # Auto-refresh
    auto_refresh = st.checkbox("üîÑ Auto-rafra√Æchissement", value=False)
    refresh_interval = st.slider("Intervalle (minutes)", 1, 60, 30)
    
    # Niveau de d√©tail
    detail_level = st.radio("Niveau de d√©tail", ["Basique", "Avanc√©", "Expert"], index=1)
    
    # Export des donn√©es
    if st.button("üì§ Exporter les donn√©es"):
        st.success("üìÑ Rapport g√©n√©r√© avec succ√®s!")
    
    # Syst√®me de logging (simplifi√©)
    if st.button("üìã Journal des √âv√©nements"):
        st.text("10:23 - Scraping r√©ussi")
        st.text("10:15 - Donn√©es mises √† jour")
        st.text("09:45 - Pr√©dictions calcul√©es")

# üéØ Tableau de bord principal am√©lior√©
st.markdown('<h1 class="main-header">üö¢ Dashboard Intelligent - S-Wing R√©union</h1>', unsafe_allow_html=True)

# Bandeau d'alerte en temps r√©el avec couleurs r√©unionnaises
col_alert1, col_alert2, col_alert3 = st.columns(3)
with col_alert1:
    st.markdown('<div class="alert-box alert-success">‚úÖ Op√©rations normales</div>', unsafe_allow_html=True)
with col_alert2:
    st.markdown('<div class="alert-box alert-warning">‚ö†Ô∏è Trafic √©lev√© pr√©vu</div>', unsafe_allow_html=True)
with col_alert3:
    st.markdown('<div class="alert-box alert-success">‚úÖ M√©t√©o favorable</div>', unsafe_allow_html=True)

# Nouvelle structure d'onglets avec contenu enrichi
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    "üè† Vue Globale", 
    "üìà Analytics", 
    "üîÆ Pr√©dictions", 
    "üö¢ Op√©rations", 
    "üìä Rapports", 
    "‚öôÔ∏è Configuration",
    "üß† IA & ML"
])

with tab1:
    st.header("üåê Vue Globale Intelligente")
    
    # M√©triques en temps r√©el am√©lior√©es
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3>Conteneurs Trait√©s</h3>
            <h2>12,458</h2>
            <p style="color: #00A859 !important;">‚Üë +8.2%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h3>Taux Occupation</h3>
            <h2>87.3%</h2>
            <p style="color: #00A859 !important;">‚Üë +3.1%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3>Satisfaction Clients</h3>
            <h2>94.2%</h2>
            <p style="color: #00A859 !important;">‚Üë +2.4%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="metric-card">
            <h3>Retards Moyens</h3>
            <h2 style="color: #EF4135 !important;">2.3h</h2>
            <p style="color: #00A859 !important;">‚Üì -0.8h</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Cartes interactives
    col_map, col_alerts = st.columns([2, 1])
    
    with col_map:
        st.subheader("üó∫Ô∏è Carte Thermique des Op√©rations")
        # Simulation d'une carte thermique avec couleurs r√©unionnaises
        data = np.random.rand(10, 10)
        fig_heatmap = px.imshow(data, 
                              title="Activit√© des Quais - Carte Thermique",
                              color_continuous_scale=["#0055A4", "#FFFFFF", "#EF4135"])
        st.plotly_chart(fig_heatmap, use_container_width=True)
    
    with col_alerts:
        st.subheader("üö® Alertes en Temps R√©el")
        
        alerts = [
            {"niveau": "‚ö†Ô∏è", "message": "Navire MSC Isabella retard√©", "time": "10:23", "couleur": "#FFD700"},
            {"niveau": "‚úÖ", "message": "Op√©ration termin√©e - Quai 3", "time": "10:15", "couleur": "#00A859"},
            {"niveau": "üîß", "message": "Maintenance pr√©vue - Quai 2", "time": "09:45", "couleur": "#0055A4"},
            {"niveau": "üì¶", "message": "Livraison sp√©ciale arriv√©e", "time": "09:30", "couleur": "#00A859"}
        ]
        
        for alert in alerts:
            st.markdown(f"""
            <div style="padding: 0.5rem; margin: 0.2rem 0; border-left: 4px solid {alert['couleur']}; background: #f8f9fa; border-radius: 5px; color: #2C3E50;">
                <strong>{alert['niveau']}</strong> {alert['message']}
                <br><small style="color: #7F8C8D;">{alert['time']}</small>
            </div>
            """, unsafe_allow_html=True)

with tab2:
    st.header("üìà Analytics Avanc√©s")
    
    # Filtres avanc√©s
    col_f1, col_f2, col_f3, col_f4 = st.columns(4)
    with col_f1:
        period = st.selectbox("P√©riode", ["7 jours", "30 jours", "90 jours", "1 an"])
    with col_f2:
        metric = st.selectbox("M√©trique", ["Conteneurs", "Navires", "Tonnage", "Productivit√©"])
    with col_f3:
        aggregation = st.selectbox("Agr√©gation", ["Journalier", "Hebdomadaire", "Mensuel"])
    with col_f4:
        view_type = st.selectbox("Vue", ["Trend", "Comparaison", "Distribution"])
    
    # Analytics avanc√©s
    col_analytics1, col_analytics2 = st.columns(2)
    
    with col_analytics1:
        # Graphique de tendance interactif avec couleurs r√©unionnaises
        dates = pd.date_range(start='2024-01-01', periods=100, freq='D')
        trend_data = pd.DataFrame({
            'date': dates,
            'conteneurs': np.cumsum(np.random.normal(800, 200, 100)),
            'navires': np.cumsum(np.random.normal(5, 2, 100)),
            'productivite': np.random.normal(30, 5, 100)
        })
        
        fig_trend = px.line(trend_data, x='date', y=['conteneurs', 'navires'],
                          title='Tendances des Op√©rations',
                          labels={'value': 'Volume', 'variable': 'M√©trique'},
                          color_discrete_sequence=["#0055A4", "#EF4135"])
        st.plotly_chart(fig_trend, use_container_width=True)
    
    with col_analytics2:
        # Analyse de corr√©lation avec couleurs r√©unionnaises
        correlation_data = pd.DataFrame({
            'Productivit√©': np.random.normal(30, 5, 50),
            'Occupation': np.random.normal(85, 10, 50),
            'Retards': np.random.normal(2, 1, 50),
            'Satisfaction': np.random.normal(90, 5, 50)
        })
        
        fig_corr = px.imshow(correlation_data.corr(),
                           title='Matrice de Corr√©lation',
                           color_continuous_scale=["#0055A4", "#FFFFFF", "#EF4135"])
        st.plotly_chart(fig_corr, use_container_width=True)

with tab3:
    # CORRECTION : Utiliser du HTML pour forcer la couleur du header
    st.markdown('<h2 style="color: #2C3E50 !important;">üîÆ Pr√©dictions et Forecasting</h2>', unsafe_allow_html=True)
    
    # Donn√©es pour les pr√©dictions
    historical_data = pd.DataFrame({
        'date': pd.date_range(start='2024-01-01', periods=60, freq='D'),
        'conteneurs_traites': np.cumsum(np.random.normal(800, 200, 60))
    })
    
    predictions = predictive_analytics.predict_traffic(historical_data)
    
    if predictions is not None:
        col_pred1, col_pred2 = st.columns(2)
        
        with col_pred1:
            # CORRECTION AM√âLIOR√âE : Graphique des pr√©dictions avec texte lisible
            fig_pred = go.Figure()
            
            # Donn√©es historiques
            fig_pred.add_trace(go.Scatter(
                x=historical_data['date'],
                y=historical_data['conteneurs_traites'],
                name='Historique',
                line=dict(color='#0055A4', width=3)
            ))
            
            # Pr√©dictions
            fig_pred.add_trace(go.Scatter(
                x=predictions['date'],
                y=predictions['prediction'],
                name='Pr√©diction',
                line=dict(color='#EF4135', width=3, dash='dash')
            ))
            
            # CORRECTION : Configuration am√©lior√©e pour la lisibilit√©
            fig_pred.update_layout(
                title=dict(
                    text='Pr√©diction du Trafic des Conteneurs',
                    font=dict(color='#2C3E50', size=20)
                ),
                plot_bgcolor='white',
                paper_bgcolor='white',
                font=dict(color='#2C3E50'),
                xaxis=dict(
                    title=dict(text='Date', font=dict(color='#2C3E50')),
                    tickfont=dict(color='#2C3E50'),
                    gridcolor='lightgray'
                ),
                yaxis=dict(
                    title=dict(text='Conteneurs Trait√©s', font=dict(color='#2C3E50')),
                    tickfont=dict(color='#2C3E50'),
                    gridcolor='lightgray'
                ),
                legend=dict(
                    font=dict(color='#2C3E50'),
                    bgcolor='rgba(255,255,255,0.8)'
                )
            )
            st.plotly_chart(fig_pred, use_container_width=True)
        
        with col_pred2:
            # D√©tails des pr√©dictions
            st.markdown('<h3 style="color: #2C3E50 !important;">üìã D√©tails des Pr√©dictions</h3>', unsafe_allow_html=True)
            
            # CORRECTION : Style am√©lior√© pour le dataframe
            styled_df = predictions.style.format({
                'prediction': '{:.0f}',
                'confidence': '{:.1%}'
            }).background_gradient(subset=['prediction'], cmap='Blues')
            
            st.dataframe(styled_df, use_container_width=True)
            
            # Indicateurs de confiance
            avg_confidence = predictions['confidence'].mean()
            st.metric("Confiance Moyenne", f"{avg_confidence:.1%}")
            
            # Recommandations
            st.markdown('<h3 style="color: #2C3E50 !important;">üí° Recommandations</h3>', unsafe_allow_html=True)
            if predictions['prediction'].mean() > historical_data['conteneurs_traites'].mean():
                st.success("**Augmentation pr√©vue** - Renforcer les √©quipes")
            else:
                st.warning("**Baisse pr√©vue** - Optimiser les ressources")

with tab4:
    st.markdown('<h2 style="color: #2C3E50 !important;">üö¢ Gestion des Op√©rations en Temps R√©el</h2>', unsafe_allow_html=True)
    
    # Interface de gestion op√©rationnelle
    col_ops1, col_ops2 = st.columns(2)
    
    with col_ops1:
        st.markdown('<h3 style="color: #2C3E50 !important;">üìã Planning des Navires</h3>', unsafe_allow_html=True)
        
        # Table interactive avec actions
        schedule_data = generate_vessel_schedule()
        edited_df = st.data_editor(
            schedule_data,
            use_container_width=True,
            column_config={
                "navire": st.column_config.TextColumn("Navire"),
                "statut": st.column_config.SelectboxColumn(
                    "Statut",
                    options=["En route", "√Ä quai", "En op√©ration", "En attente", "Annul√©"]
                )
            }
        )
    
    with col_ops2:
        st.markdown('<h3 style="color: #2C3E50 !important;">‚ö° Actions Rapides</h3>', unsafe_allow_html=True)
        
        # Boutons d'action avec couleurs r√©unionnaises
        col_act1, col_act2 = st.columns(2)
        with col_act1:
            if st.button("üîÑ Actualiser Statuts", use_container_width=True):
                st.success("Statuts mis √† jour!")
            if st.button("üìß Notifier √âquipes", use_container_width=True):
                st.info("Notifications envoy√©es!")
        with col_act2:
            if st.button("üö® Alerte Urgence", use_container_width=True, type="primary"):
                st.error("Alerte urgence activ√©e!")
            if st.button("üìä G√©n√©rer Rapport", use_container_width=True):
                st.success("Rapport g√©n√©r√©!")

with tab5:
    st.markdown('<h2 style="color: #2C3E50 !important;">üìä Rapports et Exportations</h2>', unsafe_allow_html=True)
    
    # G√©n√©ration de rapports avanc√©s
    report_type = st.selectbox("Type de Rapport", 
                             ["Op√©rations Quotidiennes", "Performance Mensuelle", "Analyse Annuelle", "Audit Complet"])
    
    col_rep1, col_rep2 = st.columns(2)
    
    with col_rep1:
        st.markdown('<h3 style="color: #2C3E50 !important;">üìà KPIs Principaux</h3>', unsafe_allow_html=True)
        
        kpis = {
            "Efficacit√© Op√©rationnelle": "94.2%",
            "Taux de Rotation": "3.2 jours",
            "Co√ªt par Conteneur": "‚Ç¨142.50",
            "Empreinte Carbone": "12.4t CO2"
        }
        
        for kpi, value in kpis.items():
            st.metric(kpi, value)
    
    with col_rep2:
        st.markdown('<h3 style="color: #2C3E50 !important;">üì§ Export des Donn√©es</h3>', unsafe_allow_html=True)
        
        # Messages d'information si les biblioth√®ques ne sont pas install√©es
        if not PDF_AVAILABLE:
            st.info("üí° **Pour activer l'export PDF**: `pip install reportlab`")
        if not EXCEL_AVAILABLE:
            st.info("üí° **Pour activer l'export Excel**: `pip install xlsxwriter`")
        
        # S√©lection des donn√©es √† exporter
        export_options = st.multiselect(
            "S√©lectionner les donn√©es √† exporter",
            ["Trafic Portuaire", "Planning Navires", "KPIs", "Pr√©dictions"],
            default=["Trafic Portuaire", "Planning Navires", "KPIs"]
        )
        
        # Formats d'export
        available_formats = ["CSV", "JSON"]
        if EXCEL_AVAILABLE:
            available_formats.append("Excel")
        if PDF_AVAILABLE:
            available_formats.append("PDF")
            
        formats = st.multiselect("Formats d'export", 
                               available_formats,
                               default=["CSV"])
        
        # Pr√©paration des donn√©es
        traffic_data, vessels_data, kpis_data = data_exporter.generate_sample_data()
        data_to_export = {}
        if "Trafic Portuaire" in export_options:
            data_to_export["trafic_portuaire"] = traffic_data
        if "Planning Navires" in export_options:
            data_to_export["planning_navires"] = vessels_data
        if "KPIs" in export_options:
            data_to_export["kpis"] = kpis_data
        if "Pr√©dictions" in export_options:
            if predictions is not None:
                data_to_export["predictions"] = predictions
        
        # Boutons d'export par format
        if data_to_export and formats:
            st.markdown("### Boutons de t√©l√©chargement")
            
            col_exp1, col_exp2 = st.columns(2)
            
            with col_exp1:
                if "CSV" in formats:
                    for key, data in data_to_export.items():
                        csv_data, filename = data_exporter.export_to_csv(data, f"{key}.csv")
                        st.download_button(
                            label=f"üìÑ T√©l√©charger {key} (CSV)",
                            data=csv_data,
                            file_name=filename,
                            mime="text/csv",
                            key=f"csv_{key}"
                        )
                
                if "JSON" in formats:
                    json_data, filename = data_exporter.export_to_json(data_to_export, "dashboard_complet.json")
                    st.download_button(
                        label="üìã T√©l√©charger JSON complet",
                        data=json_data,
                        file_name=filename,
                        mime="application/json",
                        key="json_complete"
                    )
            
            with col_exp2:
                if "Excel" in formats and EXCEL_AVAILABLE:
                    excel_data, filename = data_exporter.export_to_excel(data_to_export, "dashboard_complet.xlsx")
                    if excel_data:
                        st.download_button(
                            label="üìä T√©l√©charger Excel complet",
                            data=excel_data,
                            file_name=filename,
                            key="excel_complete"
                        )
                
                if "PDF" in formats and PDF_AVAILABLE:
                    pdf_data, filename = data_exporter.export_to_pdf(data_to_export, "rapport_dashboard.pdf")
                    if pdf_data:
                        st.download_button(
                            label="üìë T√©l√©charger rapport PDF",
                            data=pdf_data,
                            file_name=filename,
                            key="pdf_complete"
                        )
        
        else:
            st.warning("Veuillez s√©lectionner des donn√©es et des formats d'export")

with tab6:
    st.markdown('<h2 style="color: #2C3E50 !important;">‚öôÔ∏è Configuration Syst√®me</h2>', unsafe_allow_html=True)
    
    # Configuration avanc√©e
    col_conf1, col_conf2 = st.columns(2)
    
    with col_conf1:
        st.markdown('<h3 style="color: #2C3E50 !important;">üîß Param√®tres Scraping</h3>', unsafe_allow_html=True)
        
        scraping_frequency = st.select_slider(
            "Fr√©quence de scraping",
            options=["1h", "2h", "6h", "12h", "24h"],
            value="6h"
        )
        
        data_retention = st.slider(
            "R√©tention des donn√©es (jours)",
            min_value=7,
            max_value=365,
            value=90
        )
    
    with col_conf2:
        st.markdown('<h3 style="color: #2C3E50 !important;">üîê S√©curit√©</h3>', unsafe_allow_html=True)
        
        api_key = st.text_input("Cl√© API", type="password")
        enable_2fa = st.checkbox("Authentification √† deux facteurs")
        
        if st.button("üíæ Sauvegarder Configuration"):
            st.success("Configuration sauvegard√©e!")

with tab7:
    st.markdown('<h2 style="color: #2C3E50 !important;">üß† Intelligence Artificielle</h2>', unsafe_allow_html=True)
    
    st.info("""
    **Module d'IA en d√©veloppement** - Ces fonctionnalit√©s utilisent l'apprentissage automatique 
    pour optimiser les op√©rations portuaires.
    """)
    
    col_ai1, col_ai2 = st.columns(2)
    
    with col_ai1:
        st.markdown('<h3 style="color: #2C3E50 !important;">ü§ñ Optimisation Intelligente</h3>', unsafe_allow_html=True)
        
        if st.button("üéØ Optimiser Planning"):
            with st.spinner("Calcul de la solution optimale..."):
                time.sleep(3)
                st.success("Planning optimis√©! Gain estim√©: 12% de productivit√©")
        
        if st.button("üîç D√©tecter Anomalies"):
            anomalies = predictive_analytics.detect_anomalies(historical_data)
            if not anomalies.empty:
                st.warning(f"{len(anomalies)} anomalies d√©tect√©es")
                st.dataframe(anomalies)
            else:
                st.success("Aucune anomalie d√©tect√©e")
    
    with col_ai2:
        st.markdown('<h3 style="color: #2C3E50 !important;">üìö Apprentissage Automatique</h3>', unsafe_allow_html=True)
        
        ml_model = st.selectbox("Mod√®le ML", 
                              ["R√©gression Lin√©aire", "Random Forest", "R√©seau de Neurones"])
        
        st.metric("Pr√©cision du Mod√®le", "87.3%")
        st.metric("Donn√©es d'Entra√Ænement", "45,287 entr√©es")

# üîÑ Syst√®me de rafra√Æchissement automatique
if auto_refresh:
    time.sleep(refresh_interval * 60)
    st.rerun()

# üì± Responsive design et accessibilit√©
st.markdown("""
<style>
@media (max-width: 768px) {
    .main-header {
        font-size: 2rem;
        padding: 1rem;
    }
    
    .metric-card {
        padding: 1rem;
    }
}

/* Animation subtile pour les m√©triques */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.metric-card {
    animation: fadeIn 0.6s ease-out;
}

/* Assurer que tout le texte est lisible */
* {
    color: #2C3E50;
}
</style>
""", unsafe_allow_html=True)

# Footer intelligent avec couleurs r√©unionnaises
st.markdown("---")
col_foot1, col_foot2, col_foot3 = st.columns(3)
with col_foot1:
    st.markdown("**üïí Derni√®re mise √† jour:** " + datetime.now().strftime("%d/%m/%Y %H:%M"))
with col_foot2:
    st.markdown("**üìä Donn√©es:** S-Wing R√©union & Analyse IA")
with col_foot3:
    st.markdown("**üîí S√©curit√©:** Conforme RGPD")
